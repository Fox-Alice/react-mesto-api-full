{"ast":null,"code":"export const BASE_URL = 'http://localhost:3000';\nexport const onResponse = res => {\n  return res.ok ? res.json() : res.json().then(err => Promise.reject(err));\n};\nexport const register = _ref => {\n  let {\n    email,\n    password\n  } = _ref;\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(onResponse);\n};\nexport const authorize = _ref2 => {\n  let {\n    email,\n    password\n  } = _ref2;\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  }).then(onResponse).then;\n};\nexport const checkToken = () => {\n  const token = localStorage.getItem('jwt');\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      'Accept': 'application/json',\n      'Content-Type': 'application/json',\n      'authorization': `Bearer ${token}`\n    }\n  }).then(onResponse);\n};","map":{"version":3,"names":["BASE_URL","onResponse","res","ok","json","then","err","Promise","reject","register","email","password","fetch","method","headers","body","JSON","stringify","authorize","checkToken","token","localStorage","getItem"],"sources":["C:/Users/elvir/dev/react-mesto-api-full/frontend/src/utils/Auth.js"],"sourcesContent":["export const BASE_URL = 'http://localhost:3000';\r\n\r\nexport const onResponse = (res) => {\r\n  return res.ok ? res.json() : res.json()\r\n    .then((err) => Promise.reject(err));\r\n}\r\n\r\nexport const register = ({ email, password }) => {\r\n  return fetch(`${BASE_URL}/signup`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ email, password })\r\n  })\r\n    .then(onResponse);\r\n};\r\n\r\nexport const authorize = ({ email, password }) => {\r\n  return fetch(`${BASE_URL}/signin`, {\r\n    method: 'POST',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ email, password })\r\n  })\r\n    .then(onResponse)\r\n    .then;\r\n}\r\n\r\nexport const checkToken = () => {\r\n  const token = localStorage.getItem('jwt');\r\n  return fetch(`${BASE_URL}/users/me`, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Accept': 'application/json',\r\n      'Content-Type': 'application/json',\r\n      'authorization': `Bearer ${token}`,\r\n    }\r\n  })\r\n    .then(onResponse);\r\n}"],"mappings":"AAAA,OAAO,MAAMA,QAAQ,GAAG,uBAAuB;AAE/C,OAAO,MAAMC,UAAU,GAAIC,GAAG,IAAK;EACjC,OAAOA,GAAG,CAACC,EAAE,GAAGD,GAAG,CAACE,IAAI,EAAE,GAAGF,GAAG,CAACE,IAAI,EAAE,CACpCC,IAAI,CAAEC,GAAG,IAAKC,OAAO,CAACC,MAAM,CAACF,GAAG,CAAC,CAAC;AACvC,CAAC;AAED,OAAO,MAAMG,QAAQ,GAAG,QAAyB;EAAA,IAAxB;IAAEC,KAAK;IAAEC;EAAS,CAAC;EAC1C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCN,IAAI,CAACJ,UAAU,CAAC;AACrB,CAAC;AAED,OAAO,MAAMiB,SAAS,GAAG,SAAyB;EAAA,IAAxB;IAAER,KAAK;IAAEC;EAAS,CAAC;EAC3C,OAAOC,KAAK,CAAE,GAAEZ,QAAS,SAAQ,EAAE;IACjCa,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE;IAClB,CAAC;IACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC1C,CAAC,CAAC,CACCN,IAAI,CAACJ,UAAU,CAAC,CAChBI,IAAI;AACT,CAAC;AAED,OAAO,MAAMc,UAAU,GAAG,MAAM;EAC9B,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,KAAK,CAAC;EACzC,OAAOV,KAAK,CAAE,GAAEZ,QAAS,WAAU,EAAE;IACnCa,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,QAAQ,EAAE,kBAAkB;MAC5B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAG,UAASM,KAAM;IACnC;EACF,CAAC,CAAC,CACCf,IAAI,CAACJ,UAAU,CAAC;AACrB,CAAC"},"metadata":{},"sourceType":"module"}